import{S as e,L as t,_ as i,a8 as r}from"../vendor.js";class a extends e{constructor(e,a){var l=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};super();var{filterSize:p="1",minDepth:o="0.1",maxDepth:v="5.0",depthThresholdFilter:c="0.9",scale:f="7.0",ptSize:x=1,depthScale:u="1.0",pixelDepth:n="2.0"}=e;a.minFilter=t,a.magFilter=t;var{ifx:h=.00125,ify:m=.00125,itx:s=-.4,ity:d=-.6}=e,S={texImg:{type:"t",value:a},texSize:{type:"i2",value:[a.width,a.height]},iK:{type:"f4",value:[h,m,s,d]},alpha:{type:"f",value:alpha},filterSize:{type:"f",value:p},minDepth:{type:"f",value:o},maxDepth:{type:"f",value:v},depthThresholdFilter:{type:"f",value:c},scale:{type:"f",value:f},ptSize:{type:"f",value:x},pixelDepth:{type:"f",value:n},depthScale:{type:"f",value:u}};this.setValues(i(i({side:r,transparent:!0},l),{},{uniforms:S,vertexShader:"#define GLSLIFY 1\nattribute float vertexIdx;varying float vVertexIdx;varying vec2 vPtPos;uniform ivec2 texSize;uniform sampler2D texImg;uniform vec4 iK;uniform float scale;uniform float minDepth;uniform float maxDepth;uniform float pixelDepth;uniform int filterSize;uniform float ptSize;uniform float depthThresholdFilter;uniform float depthScale;float rgb2hue(vec3 c){vec4 K=vec4(0.0,-1.0/3.0,2.0/3.0,-1.0);vec4 p=mix(vec4(c.bg,K.wz),vec4(c.gb,K.xy),step(c.b,c.g));vec4 q=mix(vec4(p.xyw,c.r),vec4(c.r,p.yzx),step(p.x,c.r));float d=q.x-min(q.w,q.y);float e=1.0e-10;return abs(q.z+(q.w-q.y)/(6.0*d+e));}float getPixelDepth(ivec2 pixel){vec2 lookupPt=(vec2(pixel)+vec2(0.5))/vec2(texSize);float hue=rgb2hue(texture2D(texImg,lookupPt).rgb);float pxDepth=pixelDepth*hue;return pxDepth;}bool shouldDiscard(ivec2 currPixel){float centerPixelDepth=getPixelDepth(currPixel);for(int i=-filterSize;i<=filterSize;i++){for(int j=-filterSize;j<=filterSize;j++){if(i==0&&j==0){continue;}float currDepth=getPixelDepth(currPixel+ivec2(j,i));if(currDepth<minDepth||currDepth>=maxDepth||abs(centerPixelDepth-currDepth)>depthThresholdFilter){return true;}}}return false;}void main(){ivec2 frameSize=ivec2(texSize.x/2,texSize.y);int vertIdx=int(vertexIdx);int actualNumPts=frameSize.x*frameSize.y;if(vertIdx>=actualNumPts){gl_Position=vec4(0.0);return;}int ptY=vertIdx/int(frameSize.x);int ptX=vertIdx-ptY*int(frameSize.x);ivec2 pt=ivec2(ptX,ptY);if(shouldDiscard(pt)){gl_Position=vec4(0.0);return;}float currDepth=getPixelDepth(pt);vec3 ptPos=scale*vec3((iK.x*float(ptX)+iK.z)*currDepth,(iK.y*float(ptY)+iK.w)*currDepth,-currDepth*depthScale);vec4 mvPos=modelViewMatrix*vec4(ptPos,1.0);gl_Position=projectionMatrix*mvPos;vPtPos=vec2(float(ptX),float(ptY));vVertexIdx=vertexIdx;gl_PointSize=ptSize;}",fragmentShader:"#define GLSLIFY 1\nvarying float vVertexIdx;varying vec2 vPtPos;uniform ivec2 texSize;uniform sampler2D texImg;uniform float alpha;void main(){vec2 frameSizeF=vec2(texSize.x/2,texSize.y);ivec2 frameSize=ivec2(frameSizeF);int vertIdx=int(vVertexIdx);int actualNumPts=frameSize.x*frameSize.y;if(vertIdx>=actualNumPts){discard;}vec2 lookupPt=(vec2(vPtPos.x+frameSizeF.x,vPtPos.y)+vec2(0.5))/vec2(texSize);vec3 currColor=texture2D(texImg,lookupPt).rgb;gl_FragColor=vec4(currColor,alpha);}"}))}}export{a as FakeMirrorImageMaterial};
