import{a8 as e,aG as a,c as o,W as i,C as r,S as l,_ as t,aF as s,a as n,a_ as f}from"../vendor.js";class p{constructor(o){var{artifact:i,mergeConfig:r}=o;this.config=r(i.ply,{blending:e,depthTest:!1,file:i.slug,materials:["yellow"],positionOffset:.05,size:1,scaleOffset:.01,defaultAlpha:"1.0",fallbackAlphaDivisor:3,computeVertexNormals:!1,vertexColors:!1}),this.model=new a}preload(e){var a=this;return o((function*(){var{preload:o}=e,{file:r,computeVertexNormals:l}=a.config;r.startsWith("/")||(r="".concat(i.STATIC_URL,"/ply/").concat(r,".ply")),r.endsWith(".ply")||(r+=".ply");var t=o.plyLoader;a.geo=yield o.promisifiedLoad({loader:t,file:r}),l&&a.geo.computeVertexNormals()}))()}beforeLoadModel(e){var a=this;return o((function*(){var{engine:o}=e,{blending:p,depthTest:u,materials:d,size:c,positionOffset:m,scaleOffset:v,defaultAlpha:h,fallbackAlphaDivisor:g,vertexColors:x}=a.config;if(x){var y=new f({vertexColors:x,size:.02,sizeAttenuation:3}),C=new s(a.geo,y);a.model.add(C)}else{var S={fragmentShader:"precision highp float;\n#define GLSLIFY 1\nuniform vec3 uColor;uniform float uAlpha;void main(){vec4 col=vec4(uColor,uAlpha);gl_FragColor=col;}",vertexShader:"precision highp float;\n#define GLSLIFY 1\nuniform float uSize;void main(){gl_PointSize=uSize;gl_Position=projectionMatrix*modelViewMatrix*vec4(position,1.0);}",depthTest:u,blending:p,uniforms:{uSize:{value:c*i.pxRatio,type:"f"},uColor:{value:new r(16711680),type:"f3"},uAlpha:{value:1,type:"f"}}},A=o.XR?1:g,w=new l(t(t({},S),{},{uniforms:t({},S.uniforms)})),z=new s(a.geo,w);d.forEach(((e,o)=>{var i=h;if(n.arr(e)){var[l,t=h]=e;i=t,e=l}i=(parseFloat(i)/A).toFixed(2).toString();var s=z.clone();s.material=s.material.clone(),s.material.uniforms.uColor.value=new r(e),s.material.uniforms.uAlpha.value=i;var f=1+o*v;s.scale.set(f,f,f),s.position.x=o*m,a.model.add(s)}))}}))()}}export{p as default};
