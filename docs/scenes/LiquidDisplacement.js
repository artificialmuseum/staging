import{V as e,a6 as a,S as r,a7 as i}from"../vendor.js";class n{constructor(a){var{artifact:r}=a,{morph:i={}}=r,{startValue:n=0,maxFrequency:o=2,minFrequency:t=-1,frequencySpeed:s=.03,cameraDistanceModifier:c=!1,scale:l=.5,morphName:m="morph"}=i;this.frequencyVector=new e(n,n,n),this.maxFrequency=o,this.minFrequency=t,this.frequencySpeed=s,this.cameraDistanceModifier=c,this.scale=l,this.morphName=m,this.frequencyDir=1}init(e){var{engine:n,preload:o}=e;this.engine=n;var{camera:t}=n,s=o.assets.gltf.scene,c=t.position.distanceToSquared(s.position)*this.cameraDistanceModifier;this.materials=[],s.traverse((e=>{if(a(e.name,this.morphName)){var{material:n}=e;e.material=new r({side:i,fragmentShader:"#define GLSLIFY 1\nvarying vec2 vUv;varying float noise;varying vec3 fNormal;uniform sampler2D uColorTex;uniform sampler2D uNormalTex;uniform float cameraDistance;varying float vElevation;void main(void){vec4 textureColor=texture2D(uColorTex,vUv);gl_FragColor=vec4(textureColor.rgb,1.0);}",vertexShader:"#define GLSLIFY 1\nvarying vec2 vUv;varying float noise;varying vec3 fNormal;uniform sampler2D uColorTex;uniform sampler2D uNormalTex;uniform float scale;uniform float cameraDistance;varying float vRandom;varying float vElevation;uniform vec3 uFrequency;attribute float aRandom;\n#include <morphtarget_pars_vertex>\nvoid main(){\n#include <begin_vertex>\n#include <morphtarget_vertex>\nvUv=uv;fNormal=normal;vec4 noiseTex=texture2D(uNormalTex,vUv);noise=noiseTex.r;vec4 modelPosition=modelMatrix*vec4(transformed,1.0);float elevation=sin(normal.x*uFrequency.x);elevation+=sin(normal.y*uFrequency.y);elevation+=sin(normal.z*uFrequency.z);elevation*=0.1;modelPosition.x+=normal.x*elevation*scale/cameraDistance;modelPosition.y+=normal.y*elevation*scale/cameraDistance;modelPosition.z+=normal.z*elevation*scale/cameraDistance;vec4 viewPosition=viewMatrix*modelPosition*noise;vec4 projectedPosition=projectionMatrix*viewPosition;gl_Position=projectedPosition;vElevation=elevation;}",uniforms:{uNormalTex:{type:"t",value:n.map},uFrequency:{value:this.frequencyVector},uColorTex:{type:"t",value:n.map},scale:{type:"f",value:this.scale},cameraDistance:{type:"f",value:c}}}),e.material.morphTargets=!0,this.materials.push(e.material)}}))}render(){var{camera:e,renderer:a,scene:r}=this.engine;this.frequencyVector.x>=this.maxFrequency?this.frequencyDir=-1:this.frequencyVector.x<=this.minFrequency&&(this.frequencyDir=1);var i=this.frequencySpeed*this.frequencyDir,n=1;this.cameraDistanceModifier&&(n=e.position.distanceToSquared(this.model.position)*this.cameraDistanceModifier),this.materials.forEach((e=>{e.uniforms.uFrequency.value=this.frequencyVector.addScalar(i),e.uniforms.cameraDistance.value=n})),a.render(r,e)}}export{n as default};
