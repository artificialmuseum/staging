import{aQ as e,S as t,a9 as a,aI as i,aR as r,aS as l,aK as p}from"../vendor.js";import{v as n,f as o}from"../FakeMirrorVertex.js";class s{constructor(e){var{artifact:t,mergeConfig:a}=e;this.shaderConfig=a(t,{filterSize:"1",minDepth:"0.1",maxDepth:"5.0",depthThresholdFilter:"0.9",scale:"7.0",ptSize:1,depthScale:"1.0",pixelDepth:"2.0",ifx:.00125,ify:.00125,itx:-.4,ity:-.6,ptSize:1})}afterLoadModel(t){var{engine:a,preload:i}=t,{model:r}=a,{images:l}=i.assets,p=Object.entries(l);if(null!=p&&p.length){var n=new e;r.add(n),p.forEach((e=>{var[t,a]=e,i=r.getObjectByName(t),l=this.createPoints(a);l.position=i.position.clone(),l.rotation=i.rotation.clone(),l.scale=i.scale.clone(),group.add(l)})),r.add(group)}}createPoints(s){for(var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"1.0",{image:h}=s,{width:f,height:v}=h,u=new e,{ifx:c=.00125,ify:x=.00125,itx:y=-.4,ity:m=-.6,filterSize:g,minDepth:S,maxDepth:w,depthScale:D,depthThresholdFilter:z,scale:F,ptSize:j,pixelDepth:A}=this.shaderConfig,C={texImg:{type:"t",value:s},texSize:{type:"i2",value:[f,v]},iK:{type:"f4",value:[c,x,y,m]},alpha:{type:"f",value:d},filterSize:{type:"f",value:g},minDepth:{type:"f",value:S},maxDepth:{type:"f",value:w},depthThresholdFilter:{type:"f",value:z},scale:{type:"f",value:F},ptSize:{type:"f",value:(j*window.devicePixelRatio).toFixed(1).toString()},pixelDepth:{type:"f",value:A},depthScale:{type:"f",value:D}},I=new t({uniforms:C,side:a,transparent:!0,vertexShader:n,fragmentShader:o}),b=f/2*v,P=new Uint32Array(b),T=new Float32Array(b),K=0;K<b;K++)P[K]=K,T[K]=K;var M=new i;M.setAttribute("vertexIdx",new r(T,1)),M.setIndex(new l(new Uint32Array(P),1));var O=new p(M,I);return O.frustumCulled=!1,u.add(O),u}}export{s as default};
